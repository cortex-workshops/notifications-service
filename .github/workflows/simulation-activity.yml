name: Simulate User Activity (Comms - Notifications)

on:
  schedule:
    - cron: "5 14,18 * * 1-5"   # Weekdays at 14:05 & 18:05 UTC (2x/day)
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  simulate:
    runs-on: ubuntu-latest
    # give ourselves room for longer review/approval delays
    timeout-minutes: 360

    env:
      # --- Mirror all candidate secrets into env so bash can pick dynamically ---
      S_PAT_TAYLOR:   ${{ secrets.PAT_TAYLOR }}
      S_PAT_CATHLEEN: ${{ secrets.PAT_CATHLEEN }}
      S_PAT_SALLY:    ${{ secrets.PAT_SALLY }}
      S_PAT_JEFF:     ${{ secrets.PAT_JEFF }}
      S_PAT_STEPH:    ${{ secrets.PAT_STEPH }}
      S_PAT_CHASE:    ${{ secrets.PAT_CHASE }}
      S_PAT_MARION:   ${{ secrets.PAT_MARION }}
      S_PAT_ROSHNI:   ${{ secrets.PAT_ROSHNI }}
      S_PAT_GIANPAUL: ${{ secrets.PAT_GIANPAUL }}
      S_PAT_SAM: ${{ secrets.PAT_SAM }}

      # --- Team actors for THIS repo (Comms Team) ---
      ACTORS: |
        [
          {"username":"roshni","git_name":"Roshni","git_email":"roshni@cortex.io","pat_secret":"PAT_ROSHNI"},
          {"username":"taylor","git_name":"Taylor Schmidt","git_email":"taylor@cortex.io","pat_secret":"PAT_TAYLOR"},
          {"username":"gianpaul","git_name":"GianPaul","git_email":"gianpaul@cortex.io","pat_secret":"PAT_GIANPAUL"},
          {"username":"sam","git_name":"Sam","git_email":"sam.attaya@cortex.io","pat_secret":"PAT_SAM"}
        ]

      # --- Org-wide reviewer pool (we'll avoid the actor's own token) ---
      REVIEWER_CANDIDATES: |
        ["PAT_TAYLOR","PAT_CATHLEEN","PAT_SALLY","PAT_JEFF","PAT_STEPH","PAT_CHASE","PAT_MARION","PAT_ROSHNI","PAT_GIANPAUL"]

      # --- Delay tuning (minutes) to make time-to-first-review / approval non-zero (slower defaults) ---
      FIRST_REVIEW_MIN: "20"    # lower bound for first review delay
      FIRST_REVIEW_MAX: "120"   # upper bound
      APPROVAL_MIN: "15"        # lower bound for approval after first review
      APPROVAL_MAX: "180"       # upper bound

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Pick one random actor (from Comms Team)
        id: pick
        shell: bash
        run: |
          len=$(jq 'length' <<< "${ACTORS}")
          if [ "$len" -eq 0 ]; then
            echo "chosen=" >> $GITHUB_OUTPUT
            exit 0
          fi
          idx=$((RANDOM % len))
          obj=$(jq -r ".[$idx]" <<< "${ACTORS}")
          echo "username=$(jq -r '.username' <<< "$obj")"   >> $GITHUB_OUTPUT
          echo "git_name=$(jq -r '.git_name' <<< "$obj")"   >> $GITHUB_OUTPUT
          echo "git_email=$(jq -r '.git_email' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "pat_secret=$(jq -r '.pat_secret' <<< "$obj")" >> $GITHUB_OUTPUT

      - name: Resolve actor token (skip if missing)
        id: auth
        shell: bash
        run: |
          if [ -z "${{ steps.pick.outputs.pat_secret }}" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          PAT_SECRET="${{ steps.pick.outputs.pat_secret }}"
          TOKEN_VAR="S_${PAT_SECRET}"
          TOKEN="${!TOKEN_VAR}"

          if [ -z "$TOKEN" ]; then
            echo "Secret $PAT_SECRET is not available to this repo; skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "$TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "AUTHOR=${{ steps.pick.outputs.git_name }}" >> $GITHUB_ENV
          echo "EMAIL=${{ steps.pick.outputs.git_email }}" >> $GITHUB_ENV
          echo "BRANCH=sim/${{ steps.pick.outputs.username }}-$(date +%s)" >> $GITHUB_ENV

      - name: Stop if no actor token
        if: steps.auth.outputs.skip == 'true'
        run: echo "No valid actor token; ending run."

      - name: Pick scenario
        id: scenario
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          scenarios=("OPEN_ONLY" "COMMENT_REVIEW" "APPROVE" "MERGE" "CLOSE_UNMERGED" "BIG_DIFF" "SMALL_DIFF")
          weights=(4 3 2 2 1 1 2)
          total=0; for w in "${weights[@]}"; do total=$((total+w)); done
          r=$((RANDOM % total)); acc=0
          for i in "${!scenarios[@]}"; do
            acc=$((acc+weights[i]))
            if [ $r -lt $acc ]; then
              echo "value=${scenarios[i]}" >> $GITHUB_OUTPUT
              break
            fi
          done

      - name: Commit change (README preferred; vary size)
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          git config user.name "${AUTHOR}"
          git config user.email "${EMAIL}"

          BRANCH="${BRANCH}"

          if [ $((RANDOM % 10)) -lt 3 ]; then
            existing=$(git ls-remote --heads origin "sim/${{ steps.pick.outputs.username }}-*" | head -n1 | awk '{print $2}' | cut -d/ -f3-)
            if [ -n "$existing" ]; then
              git fetch origin "$existing"
              git checkout -b "$existing" "origin/$existing"
              BRANCH="$existing"; export BRANCH
              echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"
            else
              git checkout -b "$BRANCH"
            fi
          else
            git checkout -b "$BRANCH"
          fi

          touch README.md
          mkdir -p changelogs

          if [ "${{ steps.scenario.outputs.value }}" = "BIG_DIFF" ]; then
            f="changelogs/${{ steps.pick.outputs.username }}-$(date +%s).md"
            for i in $(seq 1 $((150 + RANDOM % 350))); do echo "- change $i at $(date -u)"; done > "$f"
          else
            echo "Update by ${AUTHOR} at $(date -u)" >> README.md
            if [ $((RANDOM % 6)) -eq 0 ] && [ -f "changelogs/old-${{ steps.pick.outputs.username }}.md" ]; then
              git rm -f "changelogs/old-${{ steps.pick.outputs.username }}.md" || true
            fi
          fi

          git add -A
          git commit -m "feat: sim update by ${AUTHOR} at $(date -u)"
          git push -u origin HEAD
          set +e

      - name: Maybe open a PR
        id: openpr
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          if [ $((RANDOM % 10)) -lt 7 ]; then
            URL=$(gh pr create \
              --title "Sim PR by ${AUTHOR}" \
              --body "Automated demo PR at $(date -u). Scenario: ${{ steps.scenario.outputs.value }}" \
              --base main --head "${BRANCH}" --draft=false || true)
            echo "url=$URL" >> $GITHUB_OUTPUT
          fi

      - name: Find an open PR to act on
        id: pr
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          if [ -n "${{ steps.openpr.outputs.url }}" ]; then
            NUM=$(gh pr view "${{ steps.openpr.outputs.url }}" --json number -q .number)
          else
            NUM=$(gh pr list --state open --author "${AUTHOR}" --json number,createdAt -q 'sort_by(.createdAt) | .[0].number')
          fi
          if [ "$NUM" = "null" ] || [ -z "$NUM" ]; then
            echo "number=" >> $GITHUB_OUTPUT
          else
            echo "number=$NUM" >> $GITHUB_OUTPUT
          fi
          
      - name: Decide review/approval delays (BIG_DIFF aware, bash-only)
        id: delays
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          set -e
          rr() { local lo="$1" hi="$2"; echo $(( lo + RANDOM % (hi - lo + 1) )); }

          # Base windows from env
          FR_MIN=${FIRST_REVIEW_MIN:-20}
          FR_MAX=${FIRST_REVIEW_MAX:-120}
          AP_MIN=${APPROVAL_MIN:-15}
          AP_MAX=${APPROVAL_MAX:-180}

          scenario="${{ steps.scenario.outputs.value }}"

          # Only BIG_DIFF gets long waits. Everything else is "small".
          # Use integer percent multipliers to avoid floats.
          if [ "$scenario" = "BIG_DIFF" ]; then
            BUCKET="xlarge"
            FACTOR_PCT=220   # 2.20x
            # Optionally widen bases to feel heavier
            FR_MIN=$((FR_MIN + 40))
            FR_MAX=$((FR_MAX + 180))
            AP_MIN=$((AP_MIN + 30))
            AP_MAX=$((AP_MAX + 240))
          else
            BUCKET="small"
            FACTOR_PCT=60    # 0.60x
          fi

          FR_BASE=$(rr "$FR_MIN" "$FR_MAX")
          AP_BASE=$(rr "$AP_MIN" "$AP_MAX")

          # ceil(base * FACTOR_PCT / 100)
          first_review_minutes=$(( (FR_BASE * FACTOR_PCT + 99) / 100 ))
          approval_minutes=$(( (AP_BASE * FACTOR_PCT + 99) / 100 ))

          # Optional caps
          # [ $first_review_minutes -gt 360 ] && first_review_minutes=360
          # [ $approval_minutes -gt 720 ] && approval_minutes=720

          echo "first_review_minutes=$first_review_minutes" >> $GITHUB_OUTPUT
          echo "approval_minutes=$approval_minutes"         >> $GITHUB_OUTPUT

          echo "Scenario: $scenario -> bucket=$BUCKET x${FACTOR_PCT}%"
          echo "First review in ~${first_review_minutes}m; approval in ~${approval_minutes}m"

      - name: Pick reviewer secret name
        id: pick_reviewer
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          pool=$(jq -r 'map(select(. != "'${{ steps.pick.outputs.pat_secret }}'"))' <<< "${REVIEWER_CANDIDATES}")
          chosen=""
          for i in {1..10}; do
            len=$(jq 'length' <<< "$pool"); [ "$len" -eq 0 ] && break
            idx=$((RANDOM % len))
            sec=$(jq -r ".[$idx]" <<< "$pool")
            tok_var="S_${sec}"
            tok="${!tok_var}"
            if [ -n "$tok" ]; then chosen="$sec"; break; fi
          done
          echo "secret=$chosen" >> $GITHUB_OUTPUT

      - name: Wait, then leave first review (COMMENT)
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number && steps.pick_reviewer.outputs.secret
        shell: bash
        run: |
          mins=${{ steps.delays.outputs.first_review_minutes }}
          echo "Sleeping ${mins} minutes before first review..."
          sleep $(( mins * 60 ))

          tok_var="S_${{ steps.pick_reviewer.outputs.secret }}"
          REVIEWER_TOKEN="${!tok_var}"
          if [ -z "$REVIEWER_TOKEN" ]; then
            echo "No reviewer token available; skipping first review."
            exit 0
          fi

          ORIGINAL_GH_TOKEN="$GH_TOKEN"
          unset GH_TOKEN

          echo "$REVIEWER_TOKEN" | gh auth login --with-token
          gh pr review ${{ steps.pr.outputs.number }} --comment --body "First review pass at $(date -u)"
          gh auth logout -h github.com -y || true

          echo "$ORIGINAL_GH_TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$ORIGINAL_GH_TOKEN" >> $GITHUB_ENV

      - name: Pick approver secret name (can be same or different)
        id: pick_approver
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          pool=$(jq -r 'map(select(. != "'${{ steps.pick.outputs.pat_secret }}'"))' <<< "${REVIEWER_CANDIDATES}")
          chosen=""
          for i in {1..10}; do
            len=$(jq 'length' <<< "$pool"); [ "$len" -eq 0 ] && break
            idx=$((RANDOM % len))
            sec=$(jq -r ".[$idx]" <<< "$pool")
            tok_var="S_${sec}"
            tok="${!tok_var}"
            if [ -n "$tok" ]; then chosen="$sec"; break; fi
          done
          # fallback to the reviewer if needed
          if [ -z "$chosen" ] && [ -n "${{ steps.pick_reviewer.outputs.secret }}" ]; then
            tok_var="S_${{ steps.pick_reviewer.outputs.secret }}"
            tok="${!tok_var}"
            [ -n "$tok" ] && chosen="${{ steps.pick_reviewer.outputs.secret }}"
          fi
          echo "secret=$chosen" >> $GITHUB_OUTPUT

      - name: Wait, then maybe approve
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number && steps.pick_approver.outputs.secret
        shell: bash
        run: |
          # ~70% chance to approve after the delay; tune per repo
          if [ $((RANDOM % 10)) -ge 7 ]; then
            echo "Skipping approval this time."
            exit 0
          fi

          mins=${{ steps.delays.outputs.approval_minutes }}
          echo "Sleeping ${mins} minutes before approval..."
          sleep $(( mins * 60 ))

          tok_var="S_${{ steps.pick_approver.outputs.secret }}"
          APPROVER_TOKEN="${!tok_var}"
          if [ -z "$APPROVER_TOKEN" ]; then
            echo "No approver token available; skipping approval."
            exit 0
          fi

          ORIGINAL_GH_TOKEN="$GH_TOKEN"
          unset GH_TOKEN

          echo "$APPROVER_TOKEN" | gh auth login --with-token
          gh pr review ${{ steps.pr.outputs.number }} --approve --body "Approval at $(date -u)"
          gh auth logout -h github.com -y || true

          echo "$ORIGINAL_GH_TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$ORIGINAL_GH_TOKEN" >> $GITHUB_ENV

      - name: Diagnose mergeability
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          # Use only fields supported by `gh pr view --json`
          gh pr view ${{ steps.pr.outputs.number }} \
            --json state,mergeable,mergeStateStatus,reviewDecision,baseRefName,isDraft \
            -q '
              "state=" + .state + "\n" +
              "mergeable=" + (.mergeable|tostring) + "\n" +
              "mergeStateStatus=" + .mergeStateStatus + "\n" +
              "reviewDecision=" + (.reviewDecision|tostring) + "\n" +
              "baseRefName=" + .baseRefName + "\n" +
              "isDraft=" + (.isDraft|tostring)
            '


      - name: Maybe (auto) merge PR
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          # ~35% chance to request auto-merge for this repo (adjust if you want more merges)
          if [ $((RANDOM % 20)) -lt 7 ]; then
            set +e
            gh pr merge ${{ steps.pr.outputs.number }} --merge --auto --delete-branch
            set -e
          else
            echo "Skipping merge attempt this run."
          fi

      - name: Maybe close without merge
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          if [ $((RANDOM % 20)) -lt 3 ]; then
            gh pr close ${{ steps.pr.outputs.number }} --delete-branch
          fi
